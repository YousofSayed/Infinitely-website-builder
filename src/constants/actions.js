/**
 * @type {import('../helpers/types').Action[]}
 */
export const actions = [
  //   {
  //     name: "hideMe",
  //     label: "Hide Me",
  //     placeholder: "Hide this element",
  //     params: {},
  //     function: "hideMe",
  //   },
  {
    name: "hideElement",
    label: "Hide Element",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "hideElement",
  },
  {
    name: "showElement",
    label: "Show Element",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "showElement",
  },
  {
    name: "toggleElement",
    label: "Toggle Element Visibility",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "toggleElement",
  },
  {
    name:'toggleAnimationClass',
    label:'Toggle animation class',
    placeholder:"Type selector and animation class, e.g., .selector , .animation-class",
    params:{
      selector:"",
      animationClass:""
    },
    function:"toggleAnimationClass"
  },
  {
    name: "addClass",
    label: "Add Class",
    placeholder: "Type selector and class, e.g., .selector, my-class",
    params: { selector: "", className: "" },
    function: "addClass",
  },
  {
    name: "removeClass",
    label: "Remove Class",
    placeholder: "Type selector and class, e.g., .selector, my-class",
    params: { selector: "", className: "" },
    function: "removeClass",
  },
  {
    name: "toggleClass",
    label: "Toggle Class",
    placeholder: "Type selector and class, e.g., .selector, my-class",
    params: { selector: "", className: "" },
    function: "toggleClass",
  },
  {
    name: "setText",
    label: "Set Text",
    placeholder: "Type selector and text, e.g., .selector, New Text",
    params: { selector: "", text: "" },
    function: "setText",
  },
  {
    name: "fadeIn",
    label: "Fade In",
    placeholder: "Type selector and duration (ms), e.g., .selector, 1000",
    params: { selector: "", duration: 0 },
    function: "fadeIn",
  },
  {
    name: "fadeOut",
    label: "Fade Out",
    placeholder: "Type selector and duration (ms), e.g., .selector, 1000",
    params: { selector: "", duration: 0 },
    function: "fadeOut",
  },
  {
    name: "slideDown",
    label: "Slide Down",
    placeholder: "Type selector and duration (ms), e.g., .selector, 1000",
    params: { selector: "", duration: 0 },
    function: "slideDown",
  },
  {
    name: "slideUp",
    label: "Slide Up",
    placeholder: "Type selector and duration (ms), e.g., .selector, 1000",
    params: { selector: "", duration: 0 },
    function: "slideUp",
  },
  {
    name: "setBackgroundColor",
    label: "Set Background Color",
    placeholder: "Type selector and color, e.g., .selector, #ffffff",
    params: { selector: "", color: "" },
    function: "setBackgroundColor",
  },
  {
    name: "setTextColor",
    label: "Set Text Color",
    placeholder: "Type selector and color, e.g., .selector, #000000",
    params: { selector: "", color: "" },
    function: "setTextColor",
  },
  {
    name: "setFontSize",
    label: "Set Font Size",
    placeholder: "Type selector and size, e.g., .selector, 16px",
    params: { selector: "", size: "" },
    function: "setFontSize",
  },
  {
    name: "setWidth",
    label: "Set Width",
    placeholder: "Type selector and width, e.g., .selector, 100px",
    params: { selector: "", width: "" },
    function: "setWidth",
  },
  {
    name: "setHeight",
    label: "Set Height",
    placeholder: "Type selector and height, e.g., .selector, 100px",
    params: { selector: "", height: "" },
    function: "setHeight",
  },
  {
    name: "scrollToElement",
    label: "Scroll to Element",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "scrollToElement",
  },
  {
    name: "setOpacity",
    label: "Set Opacity",
    placeholder: "Type selector and opacity, e.g., .selector, 0.5",
    params: { selector: "", opacity: 0 },
    function: "setOpacity",
  },
  {
    name: "rotateElement",
    label: "Rotate Element",
    placeholder: "Type selector and degrees, e.g., .selector, 90",
    params: { selector: "", degrees: 0 },
    function: "rotateElement",
  },
  {
    name: "scaleElement",
    label: "Scale Element",
    placeholder: "Type selector and scale, e.g., .selector, 1.5",
    params: { selector: "", scale: 0 },
    function: "scaleElement",
  },
  {
    name: "translateX",
    label: "Translate X",
    placeholder: "Type selector and distance, e.g., .selector, 100px",
    params: { selector: "", distance: "" },
    function: "translateX",
  },
  {
    name: "translateY",
    label: "Translate Y",
    placeholder: "Type selector and distance, e.g., .selector, 100px",
    params: { selector: "", distance: "" },
    function: "translateY",
  },
  {
    name: "setBorder",
    label: "Set Border",
    placeholder: "Type selector and style, e.g., .selector, 1px solid #000",
    params: { selector: "", style: "" },
    function: "setBorder",
  },
  {
    name: "setBorderRadius",
    label: "Set Border Radius",
    placeholder: "Type selector and radius, e.g., .selector, 10px",
    params: { selector: "", radius: "" },
    function: "setBorderRadius",
  },
  {
    name: "setAttribute",
    label: "Set Attribute",
    placeholder:
      "Type selector, attribute, and value, e.g., .selector, data-id, 123",
    params: { selector: "", attribute: "", value: "" },
    function: "setAttribute",
  },
  {
    name: "removeAttribute",
    label: "Remove Attribute",
    placeholder: "Type selector and attribute, e.g., .selector, data-id",
    params: { selector: "", attribute: "" },
    function: "removeAttribute",
  },
  {
    name: "focusElement",
    label: "Focus Element",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "focusElement",
  },
  {
    name: "blurElement",
    label: "Blur Element",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "blurElement",
  },
  {
    name: "toggleAttribute",
    label: "Toggle Attribute",
    placeholder:
      "Type selector, attribute, and value, e.g., .selector, disabled, true",
    params: { selector: "", attribute: "", value: "" },
    function: "toggleAttribute",
  },
  {
    name: "setInnerHTML",
    label: "Set Inner HTML",
    placeholder: "Type selector and HTML, e.g., .selector, <p>Hello</p>",
    params: { selector: "", html: "" },
    function: "setInnerHTML",
  },
  {
    name: "appendChild",
    label: "Append Child",
    placeholder: "Type selector and HTML, e.g., .selector, <div>New</div>",
    params: { selector: "", html: "" },
    function: "appendChild",
  },
  {
    name: "prependChild",
    label: "Prepend Child",
    placeholder: "Type selector and HTML, e.g., .selector, <div>New</div>",
    params: { selector: "", html: "" },
    function: "prependChild",
  },
  {
    name: "removeElement",
    label: "Remove Element",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "removeElement",
  },
  {
    name: "setMargin",
    label: "Set Margin",
    placeholder: "Type selector and margin, e.g., .selector, 10px",
    params: { selector: "", margin: "" },
    function: "setMargin",
  },
  {
    name: "setPadding",
    label: "Set Padding",
    placeholder: "Type selector and padding, e.g., .selector, 10px",
    params: { selector: "", padding: "" },
    function: "setPadding",
  },
  {
    name: "setPosition",
    label: "Set Position",
    placeholder: "Type selector and position, e.g., .selector, absolute",
    params: { selector: "", position: "" },
    function: "setPosition",
  },
  {
    name: "setZIndex",
    label: "Set Z-Index",
    placeholder: "Type selector and z-index, e.g., .selector, 10",
    params: { selector: "", zIndex: 0 },
    function: "setZIndex",
  },
  {
    name: "setDisplay",
    label: "Set Display",
    placeholder: "Type selector and display, e.g., .selector, flex",
    params: { selector: "", display: "" },
    function: "setDisplay",
  },
  {
    name: "shakeElement",
    label: "Shake Element",
    placeholder: "Type selector and duration (ms), e.g., .selector, 1000",
    params: { selector: "", duration: 0 },
    function: "shakeElement",
  },
  {
    name: "pulseElement",
    label: "Pulse Element",
    placeholder: "Type selector and duration (ms), e.g., .selector, 1000",
    params: { selector: "", duration: 0 },
    function: "pulseElement",
  },
  {
    name: "setFontFamily",
    label: "Set Font Family",
    placeholder: "Type selector and font, e.g., .selector, Arial",
    params: { selector: "", font: "" },
    function: "setFontFamily",
  },
  {
    name: "setFontWeight",
    label: "Set Font Weight",
    placeholder: "Type selector and weight, e.g., .selector, bold",
    params: { selector: "", weight: "" },
    function: "setFontWeight",
  },
  {
    name: "setTextAlign",
    label: "Set Text Align",
    placeholder: "Type selector and align, e.g., .selector, center",
    params: { selector: "", align: "" },
    function: "setTextAlign",
  },
  {
    name: "setBoxShadow",
    label: "Set Box Shadow",
    placeholder:
      "Type selector and shadow, e.g., .selector, 2px 2px 5px rgba(0,0,0,0.3)",
    params: { selector: "", shadow: "" },
    function: "setBoxShadow",
  },
  {
    name: "setCursor",
    label: "Set Cursor",
    placeholder: "Type selector and cursor, e.g., .selector, pointer",
    params: { selector: "", cursor: "" },
    function: "setCursor",
  },
  {
    name: "disableElement",
    label: "Disable Element",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "disableElement",
  },
  {
    name: "enableElement",
    label: "Enable Element",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "enableElement",
  },
  {
    name: "toggleDisable",
    label: "Toggle Disable",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "toggleDisable",
  },
  {
    name: "setValue",
    label: "Set Value",
    placeholder: "Type selector and value, e.g., .selector, New Value",
    params: { selector: "", value: "" },
    function: "setValue",
  },
  {
    name: "clearValue",
    label: "Clear Value",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "clearValue",
  },
  {
    name: "setMaxWidth",
    label: "Set Max Width",
    placeholder: "Type selector and max-width, e.g., .selector, 500px",
    params: { selector: "", maxWidth: "" },
    function: "setMaxWidth",
  },
  {
    name: "setMinWidth",
    label: "Set Min Width",
    placeholder: "Type selector and min-width, e.g., .selector, 200px",
    params: { selector: "", minWidth: "" },
    function: "setMinWidth",
  },
  {
    name: "setMaxHeight",
    label: "Set Max Height",
    placeholder: "Type selector and max-height, e.g., .selector, 500px",
    params: { selector: "", maxHeight: "" },
    function: "setMaxHeight",
  },
  {
    name: "setMinHeight",
    label: "Set Min Height",
    placeholder: "Type selector and min-height, e.g., .selector, 200px",
    params: { selector: "", minHeight: "" },
    function: "setMinHeight",
  },
  {
    name: "setOverflow",
    label: "Set Overflow",
    placeholder: "Type selector and overflow, e.g., .selector, auto",
    params: { selector: "", overflow: "" },
    function: "setOverflow",
  },
  {
    name: "setVisibility",
    label: "Set Visibility",
    placeholder: "Type selector and visibility, e.g., .selector, hidden",
    params: { selector: "", visibility: "" },
    function: "setVisibility",
  },
  {
    name: "toggleVisibility",
    label: "Toggle Visibility",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "toggleVisibility",
  },
  {
    name: "setTransformOrigin",
    label: "Set Transform Origin",
    placeholder: "Type selector and origin, e.g., .selector, center",
    params: { selector: "", origin: "" },
    function: "setTransformOrigin",
  },
  {
    name: "setTransition",
    label: "Set Transition",
    placeholder: "Type selector and transition, e.g., .selector, all 0.3s ease",
    params: { selector: "", transition: "" },
    function: "setTransition",
  },
  {
    name: "setBackgroundImage",
    label: "Set Background Image",
    placeholder: "Type selector and URL, e.g., .selector, image.jpg",
    params: { selector: "", url: "" },
    function: "setBackgroundImage",
  },
  {
    name: "setFlexDirection",
    label: "Set Flex Direction",
    placeholder: "Type selector and direction, e.g., .selector, row",
    params: { selector: "", direction: "" },
    function: "setFlexDirection",
  },
  {
    name: "setJustifyContent",
    label: "Set Justify Content",
    placeholder: "Type selector and justify, e.g., .selector, center",
    params: { selector: "", justify: "" },
    function: "setJustifyContent",
  },
  {
    name: "setAlignItems",
    label: "Set Align Items",
    placeholder: "Type selector and align, e.g., .selector, center",
    params: { selector: "", align: "" },
    function: "setAlignItems",
  },
  {
    name: "setGridTemplateColumns",
    label: "Set Grid Template Columns",
    placeholder: "Type selector and template, e.g., .selector, 1fr 1fr",
    params: { selector: "", template: "" },
    function: "setGridTemplateColumns",
  },
  {
    name: "setGridTemplateRows",
    label: "Set Grid Template Rows",
    placeholder: "Type selector and template, e.g., .selector, 100px 100px",
    params: { selector: "", template: "" },
    function: "setGridTemplateRows",
  },
  {
    name: "setGap",
    label: "Set Gap",
    placeholder: "Type selector and gap, e.g., .selector, 10px",
    params: { selector: "", gap: "" },
    function: "setGap",
  },
  {
    name: "cloneElement",
    label: "Clone Element",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "cloneElement",
  },
  {
    name: "setAriaLabel",
    label: "Set ARIA Label",
    placeholder: "Type selector and label, e.g., .selector, Button description",
    params: { selector: "", label: "" },
    function: "setAriaLabel",
  },
  {
    name: "toggleAriaHidden",
    label: "Toggle ARIA Hidden",
    placeholder: "Type selector, e.g., .selector",
    params: { selector: "" },
    function: "toggleAriaHidden",
  },
  {
    name: "setTabIndex",
    label: "Set Tab Index",
    placeholder: "Type selector and index, e.g., .selector, 0",
    params: { selector: "", index: 0 },
    function: "setTabIndex",
  },
  {
    name: "toggleText",
    label: "Toggle Text",
    placeholder: ".selector, text1, text2",
    params: { selector: "", text1: "", text2: "" },
    function: "toggleText",
  },
  {
    name: "addHTMLBefore",
    label: "Add HTML Before",
    placeholder: ".selector, <div>HTML</div>",
    params: { selector: "", html: "" },
    function: "addHTMLBefore",
  },
  {
    name: "addHTMLAfter",
    label: "Add HTML After",
    placeholder: ".selector, <div>HTML</div>",
    params: { selector: "", html: "" },
    function: "addHTMLAfter",
  },
  {
    name: "setPlaceholder",
    label: "Set Placeholder",
    placeholder: 'input.selector, "Enter name"',
    params: { selector: "", text: "" },
    function: "setPlaceholder",
  },
  {
    name: "clearText",
    label: "Clear Text",
    placeholder: ".selector",
    params: { selector: "" },
    function: "clearText",
  },
  {
    name: "disableScroll",
    label: "Disable Scroll",
    placeholder: ".selector",
    params: { selector: "" },
    function: "disableScroll",
  },
  {
    name: "enableScroll",
    label: "Enable Scroll",
    placeholder: ".selector",
    params: { selector: "" },
    function: "enableScroll",
  },
  {
    name: "centerText",
    label: "Center Text",
    placeholder: ".selector",
    params: { selector: "" },
    function: "centerText",
  },
  {
    name: "justifyText",
    label: "Justify Text",
    placeholder: ".selector",
    params: { selector: "" },
    function: "justifyText",
  },
  {
    name: "setLineHeight",
    label: "Set Line Height",
    placeholder: ".selector, 1.5",
    params: { selector: "", value: "" },
    function: "setLineHeight",
  },
  {
    name: "setLetterSpacing",
    label: "Set Letter Spacing",
    placeholder: ".selector, 2px",
    params: { selector: "", value: "" },
    function: "setLetterSpacing",
  },
  {
    name: "setWordSpacing",
    label: "Set Word Spacing",
    placeholder: ".selector, 4px",
    params: { selector: "", value: "" },
    function: "setWordSpacing",
  },
  {
    name: "setWhiteSpace",
    label: "Set White Space",
    placeholder: ".selector, nowrap",
    params: { selector: "", value: "" },
    function: "setWhiteSpace",
  },
  {
    name: "addTooltip",
    label: "Add Tooltip",
    placeholder: ".selector, Tooltip text",
    params: { selector: "", text: "" },
    function: "addTooltip",
  },
  {
    name: "setMinHeightVH",
    label: "Set Min-Height (vh)",
    placeholder: ".selector, 50",
    params: { selector: "", vh: 0 },
    function: "setMinHeightVH",
  },
  {
    name: "setMinWidthVW",
    label: "Set Min-Width (vw)",
    placeholder: ".selector, 50",
    params: { selector: "", vw: 0 },
    function: "setMinWidthVW",
  },
  {
    name: "setMaxHeightVH",
    label: "Set Max-Height (vh)",
    placeholder: ".selector, 80",
    params: { selector: "", vh: 0 },
    function: "setMaxHeightVH",
  },
  {
    name: "setMaxWidthVW",
    label: "Set Max-Width (vw)",
    placeholder: ".selector, 80",
    params: { selector: "", vw: 0 },
    function: "setMaxWidthVW",
  },
  {
    name: "moveElementBefore",
    label: "Move Element Before",
    placeholder: ".selector, .target",
    params: { selector: "", targetSelector: "" },
    function: "moveElementBefore",
  },
  {
    name: "moveElementAfter",
    label: "Move Element After",
    placeholder: ".selector, .target",
    params: { selector: "", targetSelector: "" },
    function: "moveElementAfter",
  },
  {
    name: "copyTextToClipboard",
    label: "Copy Text to Clipboard",
    placeholder: ".selector",
    params: { selector: "" },
    function: "copyTextToClipboard",
  },
  {
    name: "setElementId",
    label: "Set Element ID",
    placeholder: ".selector, new-id",
    params: { selector: "", id: "" },
    function: "setElementId",
  },
  {
    name: "setElementName",
    label: "Set Element Name",
    placeholder: ".selector, name",
    params: { selector: "", name: "" },
    function: "setElementName",
  },
  {
    name: "setElementTitle",
    label: "Set Element Title",
    placeholder: ".selector, title",
    params: { selector: "", title: "" },
    function: "setElementTitle",
  },
  {
    name: "removeAllChildren",
    label: "Remove All Children",
    placeholder: ".selector",
    params: { selector: "" },
    function: "removeAllChildren",
  },
  {
    name: "toggleRequired",
    label: "Toggle Required",
    placeholder: "input.selector",
    params: { selector: "" },
    function: "toggleRequired",
  },
  {
    name: "setDraggable",
    label: "Set Draggable",
    placeholder: ".selector, true/false",
    params: { selector: "", value: false },
    function: "setDraggable",
  },
  {
    name: "scrollToTop",
    label: "Scroll to Top",
    placeholder: "(no params)",
    params: {},
    function: "scrollToTop",
  },
  {
    name: "scrollToBottom",
    label: "Scroll to Bottom",
    placeholder: "(no params)",
    params: {},
    function: "scrollToBottom",
  },
  {
    name: "setFlexGrow",
    label: "Set Flex Grow",
    placeholder: ".selector, 1",
    params: { selector: "", value: 0 },
    function: "setFlexGrow",
  },
  {
    name: "setFlexShrink",
    label: "Set Flex Shrink",
    placeholder: ".selector, 1",
    params: { selector: "", value: 0 },
    function: "setFlexShrink",
  },
  {
    name: "setOrder",
    label: "Set Order",
    placeholder: ".selector, 2",
    params: { selector: "", order: 0 },
    function: "setOrder",
  },
  {
    name: "setAlignSelf",
    label: "Set Align Self",
    placeholder: ".selector, center",
    params: { selector: "", value: "" },
    function: "setAlignSelf",
  },
  {
    name: "setPointerEvents",
    label: "Set Pointer Events",
    placeholder: ".selector, none",
    params: { selector: "", value: "" },
    function: "setPointerEvents",
  },
  {
    name: "toggleFullscreen",
    label: "Toggle Fullscreen",
    placeholder: ".selector",
    params: { selector: "" },
    function: "toggleFullscreen",
  },
  {
    name: "setCaretColor",
    label: "Set Caret Color",
    placeholder: ".selector, red",
    params: { selector: "", color: "" },
    function: "setCaretColor",
  },
  {
    name: "setUserSelect",
    label: "Set User Select",
    placeholder: ".selector, none",
    params: { selector: "", value: "" },
    function: "setUserSelect",
  },
  {
    name: "setFilter",
    label: "Set CSS Filter",
    placeholder: ".selector, blur(5px)",
    params: { selector: "", value: "" },
    function: "setFilter",
  },
  {
    name: "setBackdropFilter",
    label: "Set Backdrop Filter",
    placeholder: ".selector, blur(5px)",
    params: { selector: "", value: "" },
    function: "setBackdropFilter",
  },
  {
    name: "setTextDecoration",
    label: "Set Text Decoration",
    placeholder: ".selector, underline",
    params: { selector: "", value: "" },
    function: "setTextDecoration",
  },
  {
    name: "setBorderCollapse",
    label: "Set Border Collapse",
    placeholder: ".selector, collapse",
    params: { selector: "", value: "" },
    function: "setBorderCollapse",
  },
  {
    name: "setTableLayout",
    label: "Set Table Layout",
    placeholder: ".selector, fixed",
    params: { selector: "", value: "" },
    function: "setTableLayout",
  },
  {
    name: "setListStyle",
    label: "Set List Style",
    placeholder: ".selector, none",
    params: { selector: "", value: "" },
    function: "setListStyle",
  },
  {
    name: "setDirection",
    label: "Set Text Direction",
    placeholder: ".selector, rtl",
    params: { selector: "", value: "" },
    function: "setDirection",
  },
  {
    name: "setWritingMode",
    label: "Set Writing Mode",
    placeholder: ".selector, vertical-rl",
    params: { selector: "", value: "" },
    function: "setWritingMode",
  },
  {
    name: "toggleHTML",
    label: "Toggle Inner HTML",
    placeholder: "Type selector, html1, html2",
    params: { selector: "", html1: "", html2: "" },
    function: "toggleHTML",
  },
  {
    name: "wrapElement",
    label: "Wrap Element",
    placeholder: "Type selector and wrapper tag",
    params: { selector: "", wrapperTag: "" },
    function: "wrapElement",
  },
  {
    name: "unwrapElement",
    label: "Unwrap Element",
    placeholder: "Type selector",
    params: { selector: "" },
    function: "unwrapElement",
  },
  {
    name: "swapElements",
    label: "Swap Elements",
    placeholder: "Type two selectors",
    params: { selector1: "", selector2: "" },
    function: "swapElements",
  },
  {
    name: "blinkElement",
    label: "Blink Element",
    placeholder: "Type selector, times, interval",
    params: { selector: "", times: 3, interval: 300 },
    function: "blinkElement",
  },
  {
    name: "duplicateElement",
    label: "Duplicate Element",
    placeholder: "Type selector and times",
    params: { selector: "", times: 1 },
    function: "duplicateElement",
  },
  {
    name: "centerElement",
    label: "Center Element",
    placeholder: "Type selector",
    params: { selector: "" },
    function: "centerElement",
  },
  {
    name: "insertAfter",
    label: "Insert After",
    placeholder: "Type selector and HTML",
    params: { selector: "", html: "" },
    function: "insertAfter",
  },
  {
    name: "insertBefore",
    label: "Insert Before",
    placeholder: "Type selector and HTML",
    params: { selector: "", html: "" },
    function: "insertBefore",
  },
  {
    name: "flashBackground",
    label: "Flash Background",
    placeholder: "Type selector, color, duration",
    params: { selector: "", color: "yellow", duration: 500 },
    function: "flashBackground",
  },
  {
    name: "doAnimation",
    label: "Do Animation",
    placeholder: "Type selector, e.g., .selector",
    params: {
      selector: "",
      name: "",
      duration: {
        keywords: ["0.3s", "0.5s", "1s", "2s", "3s", "5s"],
        type: "select",
      },
      timingFunction: {
        keywords: [
          "ease",
          "linear",
          "ease-in",
          "ease-out",
          "ease-in-out",
          "step-start",
          "step-end",
        ],
        type: "select",
      },
      delay: {
        keywords: ["0s", "0.2s", "0.5s", "1s", "2s"],
        type: "select",
      },
      iterationCount: {
        keywords: ["1", "2", "3", "infinite"],
        type: "select",
      },
      direction: {
        keywords: ["normal", "reverse", "alternate", "alternate-reverse"],
        type: "select",
      },
      fillMode: {
        keywords: ["none", "forwards", "backwards", "both"],
        type: "select",
      },
      playState: {
        keywords: ["running", "paused"],
        type: "select",
      },
      once: {
        type: "switch",
        value: true,
      },
    },
    function: "doAnimation",
    access: {
      name: {
        keyframes: true,
      },
    },
  },
  {
    name: "dontObserverMeAgain",
    label: `Igonre watch element`,
    function: "dontObserverMeAgain",
    placeholder: "Type selector, e.g., .selector",
    params: {
      selector: "",
    },
  },
];
